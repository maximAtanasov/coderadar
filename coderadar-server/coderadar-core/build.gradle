import org.apache.tools.ant.filters.ReplaceTokens

import java.text.SimpleDateFormat

apply plugin: "org.springframework.boot"
apply plugin: "org.asciidoctor.convert"
apply plugin: "org.ajoberstar.git-publish"
apply plugin: "com.diffplug.gradle.spotless"
apply plugin: "com.jfrog.bintray"
apply plugin: "war"

springBoot {
    mainClass = 'org.wickedsource.coderadar.CoderadarApplication'
}

ext {
    snippetsDir = file("build/generated-snippets")
}

sourceSets{
    test {
        java {
            srcDir "src/test/performance"
        }
    }
}

spotless {
    java {
        googleJavaFormat()
    }
}

processResources {
    filter ReplaceTokens, tokens: [
            "coderadar.version": version
    ]
}

test {
    outputs.dir snippetsDir

    useJUnit {
        // disable long-running integration tests by default
        excludeCategories "org.wickedsource.coderadar.testframework.category.IntegrationTest"
    }
}

task integrationTest(type: Test) {
    useJUnit {
        includeCategories "org.wickedsource.coderadar.testframework.category.IntegrationTest"
    }
}

task controllerTest(type: Test) {
    useJUnit {
        includeCategories "org.wickedsource.coderadar.testframework.category.ControllerTest"
    }
}

asciidoctor {
    attributes "snippets": snippetsDir,
            "von": version,
            "date": new SimpleDateFormat("yyyy-MM-dd").format(new Date()),
            "stylesheet": "themes/riak.css"
    inputs.dir snippetsDir
    dependsOn test
    sourceDir "src/main/asciidoc"
    outputDir "build/docs"
}

jar {
    dependsOn asciidoctor
    from("${asciidoctor.outputDir}/html5") {
        into "static/docs"
    }
}

war {
    baseName = "coderadar"
    version = project.version
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-data-jpa:${version_spring_boot}"
    compile "org.springframework.boot:spring-boot-starter-web:${version_spring_boot}"
    compile "org.springframework.boot:spring-boot-starter-security:${version_spring_boot}"
    compile "org.springframework.boot:spring-boot-starter-actuator:${version_spring_boot}"
    compile "org.springframework.boot:spring-boot-devtools:${version_spring_boot}"
    compile "org.eclipse.jgit:org.eclipse.jgit:4.6.0.201612231935-r"
    compile "commons-io:commons-io:2.4"
    compile "io.fabric8:gitective-core:0.9.10"
    compile "com.h2database:h2:1.4.191"
    compile "org.apache.commons:commons-lang3:3.4"
    compile "org.hibernate:hibernate-core:${version_hibernate}"
    compile "org.hibernate:hibernate-validator:${version_hibernate}"
    compile "org.reflections:reflections:0.9.10"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.9.8"

    compile "com.auth0:java-jwt:3.1.0"
    compile "joda-time:joda-time:2.9.7"
    compile "org.passay:passay:1.2.0"
    compile "io.dropwizard:dropwizard-metrics:1.0.6"
    compile group: 'io.dropwizard.metrics', name: 'metrics-annotation', version: '3.2.1'
    compile "io.prometheus:simpleclient_spring_boot:0.0.21"
    compile "io.prometheus:simpleclient_hotspot:0.0.21"
    compile "io.prometheus:simpleclient_dropwizard:0.0.21"
   // compile "com.fasterxml.jackson.core:jackson-databind:2.6.1"

    compile project(":coderadar-plugins:loc-analyzer-plugin")
    compile project(":coderadar-plugins:checkstyle-analyzer-plugin")
    compile project(":coderadar-server:coderadar-database")

    runtime "mysql:mysql-connector-java:5.1.6"
    runtime "org.postgresql:postgresql:9.4.1212"
    runtime "com.googlecode.log4jdbc:log4jdbc:1.2"

    providedRuntime "org.springframework.boot:spring-boot-starter-tomcat"
    providedRuntime group: 'org.apache.tomcat', name: 'tomcat-juli', version: property('tomcat.version')

    testCompile "org.springframework.boot:spring-boot-starter-test:${version_spring_boot}"
    testCompile "junit:junit:4.12"
    testCompile "org.slf4j:slf4j-ext:1.7.25"
    testCompile "org.springframework.restdocs:spring-restdocs-mockmvc:${version_spring_restdocs}"
    testCompile "org.springframework.restdocs:spring-restdocs-core:${version_spring_restdocs}"
    testCompile "com.github.springtestdbunit:spring-test-dbunit:1.3.0"
    testCompile "org.dbunit:dbunit:2.5.2"
    testCompile "com.jayway.jsonpath:json-path:2.2.0"
    testCompile "org.assertj:assertj-core:3.5.1"

    configurations.all {
        exclude(group: 'org.hibernate', module: 'hibernate-entitymanager')
    }
}

springBoot {
    executable = true
}

def Properties localBootRunProperties() {
    Properties p = new Properties();
    p.load(new FileInputStream(file(project.projectDir).absolutePath + "/local.application.properties"))
    return p;
}

bootRun {
    jvmArgs =
            [
                    // debugging
                    "-Xdebug",
                    "-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005",
            ]
    doFirst {
        // Loading the local application properties from file.
        // We cannot do this in the configuration phase, otherwise all tasks
        // would fail when the file is missing. So, we do it first thing
        // in the execution phase.
        bootRun.systemProperties = localBootRunProperties()
    }
}

gitPublish {
    repoUri = "https://github.com/reflectoring/coderadar.git"
    branch = "gh-pages"
    contents {
        from "build/pages"
        into "current/docs"
    }
    commitMessage = "automatically updated docs"
}

task preparePages() {
    doLast {
        copy {
            from "build/docs/html5"
            into "build/pages"
        }
    }
}

preparePages.dependsOn asciidoctor

task zip(type: Zip) {
    archiveName "coderadar-${project.version}.zip"
    destinationDir file("build/libs")
    from("build/libs") {
        include "*.war"
    }
    from("src/main/config") {
        include "application.properties"
    }
}
zip.dependsOn bootRepackage
zip.dependsOn build

bintray {
    user = System.getenv("BINTRAY_USER")
    key = System.getenv("BINTRAY_KEY")
    filesSpec {
        into "."
        from("build/libs") {
            include "*.zip"
        }
    }
    publish = true
    pkg {
        repo = "releases"
        name = "coderadar"
        userOrg = "reflectoring"
        version {
            name = project.version
            released = new Date()
        }
    }
}

bintrayUpload.dependsOn zip
